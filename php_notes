PHP Lesson 1 Class 

<?php
//Define Class
class User
{
    //properties (attribute)
    public $name = "brad";
    //Methods (functions) need this keyword to access proprties in class
    public function sayHello()
    {
        return $this->name . " " . " says Hello";
    }
}

//create object from class 
$user1 = new User();
echo $user1->name = "thomas";
echo "<br>";
echo $user1->sayHello();
echo "<br>";

//create second user 

$user2 = new User();
echo $user2->name;
echo "<br>";
echo $user2->sayHello();
echo "<br>";


==============================
Lesson 2 Constructor Class

<?php

class User
{
    public $name;
    public $age;

    //will always run when we create a new instance of the class, we can also pass in parameters 
    // Runs when an object is created
    public function __construct($name, $age)
    {
        echo 'Class ' . __CLASS__ . ' instantiated<br>';
        $this->name = $name;
        $this->age = $age;
    }

    public function sayHello()
    {
        return $this->name . "say hello";
    }

    // Called when no other references to a certain object
    // Used for cleanup, closing connections, etc
    public function __destruct()
    {
        echo 'destructor ran...';
    }
}


$user1 = new User("brad", 38);

echo $user1->name  . ' is ' . $user1->age;
echo $user1->sayHello();

==================
lesson 3 getters and setters 

<?php
//public can access anywhere 
//private equal can only access class that it is in
//protected can access in the class and any class it extends 
class User
{
  private $name;
  private $age;

  public function __construct($name, $age)
  {
    $this->name = $name;
    $this->age = $age;
  }

  public function getName()
  {
    return $this->name;
  }

  public function setName($name)
  {
    $this->name = $name;
  }

  // __get MAGIC METHOD
  public function __get($property)
  {
    if (property_exists($this, $property)) {
      return $this->$property;
    }
  }

  // __set MAGIC METHOD
  public function __set($property, $value)
  {
    if (property_exists($this, $property)) {
      $this->$property = $value;
    }
    return $this;
  }
}

$user1 = new User('John', 40);

//$user1->name = 'Jeff';
//echo $user1->name;

// echo $user1->setName('Jeff');
// echo $user1->getName();

$user1->__set('age', 41);
echo $user1->__get('age');

==================

Lesson 4 extensions

<?php
class User
{
    protected $name;
    protected $age;

    public function __construct($name, $age)
    {
        $this->name = $name;
        $this->age = $age;
    }
}

class Customer extends User
{
    private $balance;
    public function __construct($name, $age, $balance)
    {

        //calling the parent constructor 
        //might not need this constructor anymore , syntax sugar?
        parent::__construct($name, $age);
        $this->balance = $balance;
    }

    public function pay($amount)
    {
        return $this->name . ' paid $' . $amount;
    }

    public function getBalance()
    {
        return $this->balance . $this->name;
    }
}

$customer1 = new Customer('John', 33, 500);

//echo $customer1->pay(100);
echo $customer1->getBalance();


echo $customer1->name;

============================

Lesson 5 static properties and methods

<?php
  class User {
    public $name;
    public $age;
    //static properties are properties that dont change value 
    public static $minPassLength = 6;

    public static function validatePass($pass){
      //uses :: for static instead of ->
      if(strlen($pass) >= self::$minPassLength){
        return true;
      } else {
        return false;
      }
    }
  }

  $password = 'hello1';
  if(User::validatePass($password)){
    echo 'Password valid';
  } else {
    echo 'Password NOT valid';
  }

